services:
  # Production Database
  db_prod:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: cos_db_prod
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: cos_db_prod
    volumes:
      - P:/PostgreSQL_COS_prod:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_buffers=4GB
      -c effective_cache_size=8GB
      -c maintenance_work_mem=1GB
      -c work_mem=256MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    networks:
      - cos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Development Database
  db_dev:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: cos_db_dev
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: cos_db_dev
    volumes:
      - P:/PostgreSQL_COS_dev:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    command: >
      postgres
      -c shared_buffers=2GB
      -c effective_cache_size=4GB
      -c maintenance_work_mem=512MB
      -c work_mem=128MB
    networks:
      - cos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Test Database (ephemeral)
  db_test:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: cos_db_test
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: cos_db_test
    ports:
      - "5434:5432"
    networks:
      - cos_network
    tmpfs: /var/lib/postgresql/data  # Ephemeral storage for test database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:enterprise-bullseye
    container_name: cos_neo4j
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD:-password}"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_memory_heap_initial__size: "2G"
      NEO4J_dbms_memory_heap_max__size: "4G"
      NEO4JLABS_PLUGINS: '["apoc", "graph-data-science"]'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - F:/Neo4j_COS_data:/data
      - F:/Neo4j_COS_logs:/logs
      - F:/Neo4j_COS_transactions:/transactions
    networks:
      - cos_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Message Broker
  redis:
    image: redis/redis-stack-server:latest
    container_name: cos_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "6379:6379"
    volumes:
      - E:/Redis_COS_data:/data
    networks:
      - cos_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: cos_qdrant
    ports:
      - "6333:6333"  # HTTP
      - "6334:6334"  # GRPC
    volumes:
      - D:/qdrant_cos:/qdrant/storage
    networks:
      - cos_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    container_name: cos_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - F:/Elasticsearch_COS_data:/usr/share/elasticsearch/data
    networks:
      - cos_network
    deploy:
      resources:
        limits:
          memory: 2g
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: cos_backend
    environment:
      - POSTGRES_PROD_URL=postgresql+asyncpg://postgres:${DB_PASSWORD:-password}@db_prod:5432/cos_db_prod
      - POSTGRES_DEV_URL=postgresql+asyncpg://postgres:${DB_PASSWORD:-password}@db_dev:5432/cos_db_dev
      - POSTGRES_TEST_URL=postgresql+asyncpg://postgres:${DB_PASSWORD:-password}@db_test:5432/cos_db_test
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - OPENAPI_OUTPUT_FILE=./shared-data/openapi.json
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "8000:8000"
    networks:
      - cos_network
    volumes:
      - ../backend:/app
      - ./shared-data:/app/shared-data
    depends_on:
      db_prod:
        condition: service_healthy
      db_dev:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: cos_frontend
    ports:
      - "3000:3000"
    networks:
      - cos_network
    environment:
      - NODE_ENV=development
      - API_BASE_URL=http://backend:8000
      - OPENAPI_OUTPUT_FILE=./shared-data/openapi.json
    volumes:
      - ../frontend:/app
      - frontend_node_modules:/app/node_modules
      - ./shared-data:/app/shared-data
    depends_on:
      - backend
    restart: unless-stopped

  # Mail Service removed as not needed

volumes:
  frontend_node_modules:

networks:
  cos_network:
    driver: bridge
