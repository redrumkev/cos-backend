import logging
import uuid
from datetime import UTC, datetime
from typing import Any

from rich.logging import RichHandler

# NOTE: Mem0 client removed in Sprint 1.  Will return in Sprint 2.
mem = None  # placeholder so call sites do not break

logging.basicConfig(
    level="INFO", format="%(message)s", datefmt="[%X]", handlers=[RichHandler()]
)
logger = logging.getLogger("cos")


def log_event(
    source: str,
    data: str | dict[str, Any],
    tags: list[str] | None = None,
    key: str | None = None,
    memo: str | None = None,
) -> dict[str, Any]:
    """Log a structured memory event to mem0.

    Args:
    ----
        source (str): The module logging the event (e.g., 'pem', 'cc', 'cursor')
        data (str|dict): The core payload (prompt, result, etc.)
        tags (list): Optional tags to categorize memory
        key (str): Optional custom key; else autogenerated
        memo (str): Optional human-readable description

    Returns:
    -------
        dict: response from mem0 (typically dict[str, Any])

    """
    log_id = key or f"log-{source}-{uuid.uuid4().hex[:8]}"
    payload = {
        "source": source,
        "data": data,
        "tags": tags or [],
        "timestamp": datetime.now(UTC).isoformat(),
    }

    # Only include memo if provided
    if memo is not None:
        payload["memo"] = memo

    logger.warning(
        "[mem0] log_event called, but Mem0 client is not available (Sprint 1 stub). "
        "Returning stub response."
    )
    return {
        "status": "mem0_stub",
        "log_id": log_id,
        "memo": memo,
        "data": data,
    }


# Optional usage example
def _demo() -> dict[str, Any]:
    return log_event(
        source="pem",
        data={"prompt": "What is quantum authorship?", "output": "..."},
        tags=["prompt", "test"],
        memo="Initial PEM prompt test",
    )


if __name__ == "__main__":
    logger.info(f"Demo log event result: {_demo()}")
