---
metadata:
  name: mem0_memory_module
  applies_to:
    - src/memory/mem0/*.py
    - common/mem0_client.py
    - docker-compose.mem0.yml
    - redis.conf
  rule_type: agent_requested
  summary: COS Layer 1/2 Memory System - volatile + evolving memory backed by Redis Stack and FastAPI.

definition:
  name: mem0
  scope: memory.l1
  summary: |
    The mem0 module implements ephemeral (L1) and evolving (L2) memory operations via Redis Stack.
    It supports prompt/result/log ingestion from PEM, Cursor, and agents—prior to graphification or archiving.
    Designed to be fast, container-resilient, and compatible with memory upgrades like mem0g (L3).

  pattern:
    description: |
      - Exposed via FastAPI on port 80 (proxied to http://mem0.cos.local)
      - Uses Redis Stack (JSON + optional vector) with persistent mount to E:/mem0_data
      - Splits memory logic into `scratchpad.py` (L1) and `buffer.py` (L2)
      - Accepts internal logs and updates, not public-facing
      - Offloads context to L3 (`mem0g`) or archive (L4/Postgres) when necessary
      - Compatible with `docker-compose.mem0.yml` and Traefik reverse proxy

    best_practices:
      - Use low-token, JSON-based schemas
      - Avoid writing to L4 unless routing via PEM/agent
      - Maintain L1–L2 boundary: scratchpad clears often, buffer persists temporarily
      - Reference schema in `README.memory.md` and `cos_memory_layers.yaml`

  examples:
    - health_check: "GET http://mem0.cos.local/health → {\"status\": \"ok\"}"
    - log_event: "POST /memory/write {\"source\": \"pem\", \"data\": {..}, \"tags\": [\"trace\"]}"
    - scratch: "Use `scratchpad.set_memory(key, value)` → short-lived"
    - buffer: "Use `buffer.store_interaction()` → persists across restart"

  notes:
    - Redis is configured via redis.conf, volume-mounted at E:/mem0_data
    - Only log meaningful memory events—agentic decisions, user inputs, etc.
    - Thus `mem0` feeds into `mem0g` (graph memory) via internal linkers (planned)
